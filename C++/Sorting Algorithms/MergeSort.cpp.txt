//  Created by Frank M. Carrano and Tim Henry.
//  Copyright (c) 2016 __Pearson Education__. All rights reserved.

#include <iostream>
#include <string>

const int MAX_SIZE = 50;

template<class ItemType>
void merge(ItemType theArray[], int first, int mid, int last) {
	ItemType tempArray[MAX_SIZE]; 

	int first1 = first;          
	int last1 = mid;            
	int first2 = mid + 1;      
	int last2 = last;         

	int index = first1;
	while ((first1 <= last1) && (first2 <= last2)) {
		if (theArray[first1] <= theArray[first2]) {
			tempArray[index] = theArray[first1];
			first1++;
		} else {
			tempArray[index] = theArray[first2];
			first2++;
		} 
		index++;
	}  

	while (first1 <= last1) {
		tempArray[index] = theArray[first1];
		first1++;
		index++;
	} 

	while (first2 <= last2) {
		tempArray[index] = theArray[first2];
		first2++;
		index++;
	} 

	for (index = first; index <= last; index++)
		theArray[index] = tempArray[index];
} 

template<class ItemType>
void mergeSort(ItemType theArray[], int first, int last) {
	if (first < last) {
		int mid = first + (last - first) / 2;
		mergeSort(theArray, first, mid);
		mergeSort(theArray, mid + 1, last);
		merge(theArray, first, mid, last);
	} 
}  

int main() {
	std::string a[6] = { "Z", "X", "R", "K", "F", "B" };
	mergeSort(a, 0, 5);
	for (int i = 0; i < 6; i++)
		std::cout << a[i] << " ";
	std::cout << std::endl;

}  // end main

 /*
  B F K R X Z
 */