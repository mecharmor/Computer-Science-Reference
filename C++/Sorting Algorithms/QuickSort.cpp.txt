#include <iostream>
#include <string>

static const int MIN_SIZE = 10; 

template<class ItemType>
void insertionSort(ItemType theArray[], int first, int last)
{
	for (int unsorted = first + 1; unsorted <= last; unsorted++) {
		ItemType nextItem = theArray[unsorted];
		int loc = unsorted;
		while ((loc > first) && (theArray[loc - 1] > nextItem)) {
			theArray[loc] = theArray[loc - 1];
			loc--;
		}
		theArray[loc] = nextItem; 
	}
}  
template<class ItemType>
void order(ItemType theArray[], int i, int j) {
	if (theArray[i] > theArray[j])
		std::swap(theArray[i], theArray[j]); 
} 

template<class ItemType>
int sortFirstMiddleLast(ItemType theArray[], int first, int last) {
	int mid = first + (last - first) / 2;
	order(theArray, first, mid);
	order(theArray, mid, last);
	order(theArray, first, mid);

	return mid;
}  

template<class ItemType>
int partition(ItemType theArray[], int first, int last) {
	int pivotIndex = sortFirstMiddleLast(theArray, first, last);
	std::swap(theArray[pivotIndex], theArray[last - 1]);
	pivotIndex = last - 1;
	ItemType pivot = theArray[pivotIndex];

	int indexFromLeft = first + 1;
	int indexFromRight = last - 2;

	bool done = false;
	while (!done) {
		while (theArray[indexFromLeft] < pivot)
			indexFromLeft = indexFromLeft + 1;

		while (theArray[indexFromRight] > pivot)
			indexFromRight = indexFromRight - 1;

		if (indexFromLeft < indexFromRight) {
			std::swap(theArray[indexFromLeft], theArray[indexFromRight]);
			indexFromLeft = indexFromLeft + 1;
			indexFromRight = indexFromRight - 1;
		}
		else
			done = true;
	}  

	std::swap(theArray[pivotIndex], theArray[indexFromLeft]);
	pivotIndex = indexFromLeft;

	return pivotIndex;
} 

template<class ItemType>
void quickSort(ItemType theArray[], int first, int last) {
	if (last - first + 1 < MIN_SIZE) {
		insertionSort(theArray, first, last);
	} else {
		int pivotIndex = partition(theArray, first, last);

		quickSort(theArray, first, pivotIndex - 1);
		quickSort(theArray, pivotIndex + 1, last);
	} 
} 

int main() {
	std::string a[6] = { "Z", "X", "R", "K", "F", "B" };
	quickSort(a, 0, 5);
	for (int i = 0; i < 6; i++)
		std::cout << a[i] << " ";
	std::cout << std::endl;

	std::string b[26] = { "Z", "Y", "X", "W", "V", "U", "T", "S", "R", "Q", "P", "O", "N", "M", "L", "K", "J", "I", "H", "G", "F", "E", "D", "C", "B", "A" };
	quickSort(b, 0, 25);
	for (int i = 0; i < 26; i++)
		std::cout << b[i] << " ";
	std::cout << std::endl;
}  

/*
   B F K R X Z
   A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
*/